// Code generated by xsd2code v3.0; DO NOT EDIT.
// Generated on 2025-06-02 15:08:10

package models

import (
	"regexp"
	"strings"
	"encoding/xml"
	"time"
)

// CollapsedStringType represents a string with length restrictions
type CollapsedStringType string

// Validate validates the CollapsedStringType format
func (v CollapsedStringType) Validate() bool {
	strVal := string(v)
	strVal = applyWhiteSpaceProcessing(strVal, "collapse")
	length := len(strVal)
	if length < 1 {
		return false
	}
	if length > 50 {
		return false
	}
	return true
}

// ExactLengthCodeType represents a string with pattern validation
type ExactLengthCodeType string

// Validate validates the ExactLengthCodeType format
func (v ExactLengthCodeType) Validate() bool {
	// Validate against pattern: [A-Z]{5}
	pattern := regexp.MustCompile(`[A-Z]{5}`)
	return pattern.MatchString(string(v))
}

// PercentageType represents a float64 with range restrictions
type PercentageType float64

// Validate validates the PercentageType format
func (v PercentageType) Validate() bool {
	val := float64(v)
	if val < 0.0 {
		return false
	}
	if val > 100.0 {
		return false
	}
	return true
}

// PreservedStringType represents a string with length restrictions
type PreservedStringType string

// Validate validates the PreservedStringType format
func (v PreservedStringType) Validate() bool {
	strVal := string(v)
	strVal = applyWhiteSpaceProcessing(strVal, "preserve")
	length := len(strVal)
	if length > 255 {
		return false
	}
	return true
}

// TestDocument represents TestDocument
type TestDocument struct {
	XMLName xml.Name `xml:"http://example.com/test TestDocument"`
	Code ExactLengthCodeType `xml:"code"`
	Percentage PercentageType `xml:"percentage"`
	Description CollapsedStringType `xml:"description"`
	Comment *PreservedStringType `xml:"comment,omitempty"`
	// (Fixed value: 1.0)
	Version string `xml:"version"`
	Id string `xml:"id,attr"`
	Created *time.Time `xml:"created,attr"`
	// (Fixed value: active)
	Status *string `xml:"status,attr"`
}

// applyWhiteSpaceProcessing applies XSD whiteSpace facet processing
func applyWhiteSpaceProcessing(value, whiteSpaceAction string) string {
	switch whiteSpaceAction {
	case "replace":
		// Replace tab, newline, and carriage return with space
		value = strings.ReplaceAll(value, "\t", " ")
		value = strings.ReplaceAll(value, "\n", " ")
		value = strings.ReplaceAll(value, "\r", " ")
		return value
	case "collapse":
		// First apply replace processing
		value = strings.ReplaceAll(value, "\t", " ")
		value = strings.ReplaceAll(value, "\n", " ")
		value = strings.ReplaceAll(value, "\r", " ")
		// Then collapse sequences of spaces and trim
		value = regexp.MustCompile(`\\s+`).ReplaceAllString(value, " ")
		value = strings.TrimSpace(value)
		return value
	case "preserve":
		fallthrough
	default:
		// Preserve all whitespace as-is
		return value
	}
}

