// Code generated by xsd2code v3.0; DO NOT EDIT.
// Generated on 2025-05-31 18:57:25

package plcopen

import (
	"encoding/xml"
	"time"
)

// DataTypeString DataTypeString represents the inline complex type for element
// string
type DataTypeString struct {
	XMLName xml.Name `xml:"string" json:"-"`
	Length *uint64 `xml:"length,attr" json:"length,omitempty"`
}

// DataTypeWstring DataTypeWstring represents the inline complex type for
// element wstring
type DataTypeWstring struct {
	XMLName xml.Name `xml:"wstring" json:"-"`
	Length *uint64 `xml:"length,attr" json:"length,omitempty"`
}

// DataTypeArray DataTypeArray represents the inline complex type for element
// array
type DataTypeArray struct {
	XMLName xml.Name `xml:"array" json:"-"`
	Dimension []RangeSigned `xml:"dimension" json:"dimension"`
	BaseType *DataType `xml:"baseType" json:"baseType"`
}

// DataTypeDerived DataTypeDerived represents the inline complex type for
// element derived
type DataTypeDerived struct {
	XMLName xml.Name `xml:"derived" json:"-"`
	Name string `xml:"name,attr" json:"name"`
}

// DataTypeEnumValuesValue DataTypeEnumValuesValue represents the inline complex
// type for element value
type DataTypeEnumValuesValue struct {
	XMLName xml.Name `xml:"value" json:"-"`
	Name string `xml:"name,attr" json:"name"`
	Value *string `xml:"value,attr" json:"value,omitempty"`
}

// DataTypeEnumValues DataTypeEnumValues represents the inline complex type for
// element values
type DataTypeEnumValues struct {
	XMLName xml.Name `xml:"values" json:"-"`
	Value DataTypeEnumValuesValue `xml:"value" json:"value"`
}

// DataTypeEnum DataTypeEnum represents the inline complex type for element enum
type DataTypeEnum struct {
	XMLName xml.Name `xml:"enum" json:"-"`
	Values DataTypeEnumValues `xml:"values" json:"values"`
	BaseType *DataType `xml:"baseType" json:"baseType,omitempty"`
}

// DataTypeSubrangeSigned DataTypeSubrangeSigned represents the inline complex
// type for element subrangeSigned
type DataTypeSubrangeSigned struct {
	XMLName xml.Name `xml:"subrangeSigned" json:"-"`
	Range RangeSigned `xml:"range" json:"range"`
	BaseType *DataType `xml:"baseType" json:"baseType"`
}

// DataTypeSubrangeUnsigned DataTypeSubrangeUnsigned represents the inline
// complex type for element subrangeUnsigned
type DataTypeSubrangeUnsigned struct {
	XMLName xml.Name `xml:"subrangeUnsigned" json:"-"`
	Range RangeUnsigned `xml:"range" json:"range"`
	BaseType *DataType `xml:"baseType" json:"baseType"`
}

// DataTypePointer DataTypePointer represents the inline complex type for
// element pointer
type DataTypePointer struct {
	XMLName xml.Name `xml:"pointer" json:"-"`
	BaseType *DataType `xml:"baseType" json:"baseType"`
}

// DataType A generic data type
type DataType struct {
	XMLName xml.Name `xml:"http://www.plcopen.org/xml/tc6.xsd dataType" json:"-"`
	BOOL string `xml:"BOOL" json:"BOOL"`
	BYTE string `xml:"BYTE" json:"BYTE"`
	WORD string `xml:"WORD" json:"WORD"`
	DWORD string `xml:"DWORD" json:"DWORD"`
	LWORD string `xml:"LWORD" json:"LWORD"`
	SINT string `xml:"SINT" json:"SINT"`
	INT string `xml:"INT" json:"INT"`
	DINT string `xml:"DINT" json:"DINT"`
	LINT string `xml:"LINT" json:"LINT"`
	USINT string `xml:"USINT" json:"USINT"`
	UINT string `xml:"UINT" json:"UINT"`
	UDINT string `xml:"UDINT" json:"UDINT"`
	ULINT string `xml:"ULINT" json:"ULINT"`
	REAL string `xml:"REAL" json:"REAL"`
	LREAL string `xml:"LREAL" json:"LREAL"`
	TIME string `xml:"TIME" json:"TIME"`
	DATE string `xml:"DATE" json:"DATE"`
	DT string `xml:"DT" json:"DT"`
	TOD string `xml:"TOD" json:"TOD"`
	String DataTypeString `xml:"string" json:"string"`
	Wstring DataTypeWstring `xml:"wstring" json:"wstring"`
	Array DataTypeArray `xml:"array" json:"array"`
	// Reference to a user defined datatype or POU. Variable declarations use this
	// type to declare e.g. function block instances.
	Derived DataTypeDerived `xml:"derived" json:"derived"`
	Enum DataTypeEnum `xml:"enum" json:"enum"`
	Struct VarListPlain `xml:"struct" json:"struct"`
	SubrangeSigned DataTypeSubrangeSigned `xml:"subrangeSigned" json:"subrangeSigned"`
	SubrangeUnsigned DataTypeSubrangeUnsigned `xml:"subrangeUnsigned" json:"subrangeUnsigned"`
	Pointer DataTypePointer `xml:"pointer" json:"pointer"`
}

// RangeSigned Defines a range with signed bounds
type RangeSigned struct {
	XMLName xml.Name `xml:"http://www.plcopen.org/xml/tc6.xsd rangeSigned" json:"-"`
	Lower int64 `xml:"lower,attr" json:"lower"`
	Upper int64 `xml:"upper,attr" json:"upper"`
}

// RangeUnsigned Defines a range with unsigned bounds
type RangeUnsigned struct {
	XMLName xml.Name `xml:"http://www.plcopen.org/xml/tc6.xsd rangeUnsigned" json:"-"`
	Lower uint64 `xml:"lower,attr" json:"lower"`
	Upper uint64 `xml:"upper,attr" json:"upper"`
}

// ValueSimpleValue ValueSimpleValue represents the inline complex type for
// element simpleValue
type ValueSimpleValue struct {
	XMLName xml.Name `xml:"simpleValue" json:"-"`
	Value *string `xml:"value,attr" json:"value,omitempty"`
}

// ValueArrayValueValue ValueArrayValueValue represents the inline complex type
// for element value
type ValueArrayValueValue struct {
	XMLName xml.Name `xml:"value" json:"-"`
}

// ValueArrayValue ValueArrayValue represents the inline complex type for
// element arrayValue
type ValueArrayValue struct {
	XMLName xml.Name `xml:"arrayValue" json:"-"`
	Value ValueArrayValueValue `xml:"value" json:"value"`
}

// ValueStructValueValue ValueStructValueValue represents the inline complex
// type for element value
type ValueStructValueValue struct {
	XMLName xml.Name `xml:"value" json:"-"`
}

// ValueStructValue ValueStructValue represents the inline complex type for
// element structValue
type ValueStructValue struct {
	XMLName xml.Name `xml:"structValue" json:"-"`
	Value ValueStructValueValue `xml:"value" json:"value"`
}

// Value A generic value
type Value struct {
	XMLName xml.Name `xml:"http://www.plcopen.org/xml/tc6.xsd value" json:"-"`
	SimpleValue ValueSimpleValue `xml:"simpleValue" json:"simpleValue"`
	ArrayValue ValueArrayValue `xml:"arrayValue" json:"arrayValue"`
	StructValue ValueStructValue `xml:"structValue" json:"structValue"`
}

// BodyFBDComment BodyFBDComment represents the inline complex type for element
// comment
type BodyFBDComment struct {
	XMLName xml.Name `xml:"comment" json:"-"`
	Position Position `xml:"position" json:"position"`
	Content FormattedText `xml:"content" json:"content"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height float64 `xml:"height,attr" json:"height"`
	Width float64 `xml:"width,attr" json:"width"`
}

// BodyFBDError BodyFBDError represents the inline complex type for element
// error
type BodyFBDError struct {
	XMLName xml.Name `xml:"error" json:"-"`
	Position Position `xml:"position" json:"position"`
	Content FormattedText `xml:"content" json:"content"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height float64 `xml:"height,attr" json:"height"`
	Width float64 `xml:"width,attr" json:"width"`
}

// BodyFBDConnector BodyFBDConnector represents the inline complex type for
// element connector
type BodyFBDConnector struct {
	XMLName xml.Name `xml:"connector" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	// The operand is a valid iec variable e.g. avar[0]
	Name string `xml:"name,attr" json:"name"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
}

// BodyFBDContinuation BodyFBDContinuation represents the inline complex type
// for element continuation
type BodyFBDContinuation struct {
	XMLName xml.Name `xml:"continuation" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	// The operand is a valid iec variable e.g. avar[0]
	Name string `xml:"name,attr" json:"name"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
}

// BodyFBDActionBlockActionReference BodyFBDActionBlockActionReference
// represents the inline complex type for element reference
type BodyFBDActionBlockActionReference struct {
	XMLName xml.Name `xml:"reference" json:"-"`
	Name string `xml:"name,attr" json:"name"`
}

// BodyFBDActionBlockAction BodyFBDActionBlockAction represents the inline
// complex type for element action
type BodyFBDActionBlockAction struct {
	XMLName xml.Name `xml:"action" json:"-"`
	// Name of an action or boolean variable.
	Reference *BodyFBDActionBlockActionReference `xml:"reference" json:"reference,omitempty"`
	// Inline implementation of an action body.
	Inline *Body `xml:"inline" json:"inline,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	Qualifier *string `xml:"qualifier,attr" json:"qualifier,omitempty"`
	Duration *string `xml:"duration,attr" json:"duration,omitempty"`
	Indicator *string `xml:"indicator,attr" json:"indicator,omitempty"`
}

// BodyFBDActionBlock BodyFBDActionBlock represents the inline complex type for
// element actionBlock
type BodyFBDActionBlock struct {
	XMLName xml.Name `xml:"actionBlock" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	Action []BodyFBDActionBlockAction `xml:"action" json:"action,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
}

// BodyFBDBlockInputVariablesVariable BodyFBDBlockInputVariablesVariable
// represents the inline complex type for element variable
type BodyFBDBlockInputVariablesVariable struct {
	XMLName xml.Name `xml:"variable" json:"-"`
	ConnectionPointIn ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	FormalParameter string `xml:"formalParameter,attr" json:"formalParameter"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
	Edge *EdgeModifierType `xml:"edge,attr" json:"edge,omitempty"`
	Storage *StorageModifierType `xml:"storage,attr" json:"storage,omitempty"`
	Hidden *bool `xml:"hidden,attr" json:"hidden,omitempty"`
}

// BodyFBDBlockInputVariables BodyFBDBlockInputVariables represents the inline
// complex type for element inputVariables
type BodyFBDBlockInputVariables struct {
	XMLName xml.Name `xml:"inputVariables" json:"-"`
	Variable []BodyFBDBlockInputVariablesVariable `xml:"variable" json:"variable,omitempty"`
}

// BodyFBDBlockInOutVariablesVariable BodyFBDBlockInOutVariablesVariable
// represents the inline complex type for element variable
type BodyFBDBlockInOutVariablesVariable struct {
	XMLName xml.Name `xml:"variable" json:"-"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	FormalParameter string `xml:"formalParameter,attr" json:"formalParameter"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
	Edge *EdgeModifierType `xml:"edge,attr" json:"edge,omitempty"`
	Storage *StorageModifierType `xml:"storage,attr" json:"storage,omitempty"`
	Hidden *bool `xml:"hidden,attr" json:"hidden,omitempty"`
}

// BodyFBDBlockInOutVariables BodyFBDBlockInOutVariables represents the inline
// complex type for element inOutVariables
type BodyFBDBlockInOutVariables struct {
	XMLName xml.Name `xml:"inOutVariables" json:"-"`
	Variable []BodyFBDBlockInOutVariablesVariable `xml:"variable" json:"variable,omitempty"`
}

// BodyFBDBlockOutputVariablesVariable BodyFBDBlockOutputVariablesVariable
// represents the inline complex type for element variable
type BodyFBDBlockOutputVariablesVariable struct {
	XMLName xml.Name `xml:"variable" json:"-"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	FormalParameter string `xml:"formalParameter,attr" json:"formalParameter"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
	Edge *EdgeModifierType `xml:"edge,attr" json:"edge,omitempty"`
	Storage *StorageModifierType `xml:"storage,attr" json:"storage,omitempty"`
	Hidden *bool `xml:"hidden,attr" json:"hidden,omitempty"`
}

// BodyFBDBlockOutputVariables BodyFBDBlockOutputVariables represents the inline
// complex type for element outputVariables
type BodyFBDBlockOutputVariables struct {
	XMLName xml.Name `xml:"outputVariables" json:"-"`
	Variable []BodyFBDBlockOutputVariablesVariable `xml:"variable" json:"variable,omitempty"`
}

// BodyFBDBlock BodyFBDBlock represents the inline complex type for element
// block
type BodyFBDBlock struct {
	XMLName xml.Name `xml:"block" json:"-"`
	// Anchor position of the box. Top left corner excluding the instance name.
	Position Position `xml:"position" json:"position"`
	// The list of used input variables (consumers)
	InputVariables BodyFBDBlockInputVariables `xml:"inputVariables" json:"inputVariables"`
	// The list of used inOut variables
	InOutVariables BodyFBDBlockInOutVariables `xml:"inOutVariables" json:"inOutVariables"`
	// The list of used output variables (producers)
	OutputVariables BodyFBDBlockOutputVariables `xml:"outputVariables" json:"outputVariables"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	TypeName string `xml:"typeName,attr" json:"typeName"`
	InstanceName *string `xml:"instanceName,attr" json:"instanceName,omitempty"`
	// Used to identify the order of execution. Also used to identify one special
	// block if there are several blocks with the same name.
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
}

// BodyFBDInVariable BodyFBDInVariable represents the inline complex type for
// element inVariable
type BodyFBDInVariable struct {
	XMLName xml.Name `xml:"inVariable" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	// The operand is a valid iec variable e.g. avar[0].
	Expression string `xml:"expression" json:"expression"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
	Edge *EdgeModifierType `xml:"edge,attr" json:"edge,omitempty"`
	Storage *StorageModifierType `xml:"storage,attr" json:"storage,omitempty"`
}

// BodyFBDOutVariable BodyFBDOutVariable represents the inline complex type for
// element outVariable
type BodyFBDOutVariable struct {
	XMLName xml.Name `xml:"outVariable" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	// The operand is a valid iec variable e.g. avar[0].
	Expression string `xml:"expression" json:"expression"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
	Edge *EdgeModifierType `xml:"edge,attr" json:"edge,omitempty"`
	Storage *StorageModifierType `xml:"storage,attr" json:"storage,omitempty"`
}

// BodyFBDInOutVariable BodyFBDInOutVariable represents the inline complex type
// for element inOutVariable
type BodyFBDInOutVariable struct {
	XMLName xml.Name `xml:"inOutVariable" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	// The operand is a valid iec variable e.g. avar[0].
	Expression string `xml:"expression" json:"expression"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
	NegatedIn *bool `xml:"negatedIn,attr" json:"negatedIn,omitempty"`
	EdgeIn *EdgeModifierType `xml:"edgeIn,attr" json:"edgeIn,omitempty"`
	StorageIn *StorageModifierType `xml:"storageIn,attr" json:"storageIn,omitempty"`
	NegatedOut *bool `xml:"negatedOut,attr" json:"negatedOut,omitempty"`
	EdgeOut *EdgeModifierType `xml:"edgeOut,attr" json:"edgeOut,omitempty"`
	StorageOut *StorageModifierType `xml:"storageOut,attr" json:"storageOut,omitempty"`
}

// BodyFBDLabel BodyFBDLabel represents the inline complex type for element
// label
type BodyFBDLabel struct {
	XMLName xml.Name `xml:"label" json:"-"`
	Position Position `xml:"position" json:"position"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	Label string `xml:"label,attr" json:"label"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
}

// BodyFBDJump BodyFBDJump represents the inline complex type for element jump
type BodyFBDJump struct {
	XMLName xml.Name `xml:"jump" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	Label string `xml:"label,attr" json:"label"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
}

// BodyFBDReturn BodyFBDReturn represents the inline complex type for element
// return
type BodyFBDReturn struct {
	XMLName xml.Name `xml:"return" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
}

// BodyFBD BodyFBD represents the inline complex type for element FBD
type BodyFBD struct {
	XMLName xml.Name `xml:"FBD" json:"-"`
	Comment BodyFBDComment `xml:"comment" json:"comment"`
	Error BodyFBDError `xml:"error" json:"error"`
	Connector BodyFBDConnector `xml:"connector" json:"connector"`
	// Counterpart of the connector element
	Continuation BodyFBDContinuation `xml:"continuation" json:"continuation"`
	ActionBlock BodyFBDActionBlock `xml:"actionBlock" json:"actionBlock"`
	Block BodyFBDBlock `xml:"block" json:"block"`
	// Expression used as producer
	InVariable BodyFBDInVariable `xml:"inVariable" json:"inVariable"`
	// Expression used as consumer
	OutVariable BodyFBDOutVariable `xml:"outVariable" json:"outVariable"`
	// Expression used as producer and consumer
	InOutVariable BodyFBDInOutVariable `xml:"inOutVariable" json:"inOutVariable"`
	Label BodyFBDLabel `xml:"label" json:"label"`
	Jump BodyFBDJump `xml:"jump" json:"jump"`
	Return BodyFBDReturn `xml:"return" json:"return"`
}

// BodyLDComment BodyLDComment represents the inline complex type for element
// comment
type BodyLDComment struct {
	XMLName xml.Name `xml:"comment" json:"-"`
	Position Position `xml:"position" json:"position"`
	Content FormattedText `xml:"content" json:"content"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height float64 `xml:"height,attr" json:"height"`
	Width float64 `xml:"width,attr" json:"width"`
}

// BodyLDError BodyLDError represents the inline complex type for element error
type BodyLDError struct {
	XMLName xml.Name `xml:"error" json:"-"`
	Position Position `xml:"position" json:"position"`
	Content FormattedText `xml:"content" json:"content"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height float64 `xml:"height,attr" json:"height"`
	Width float64 `xml:"width,attr" json:"width"`
}

// BodyLDConnector BodyLDConnector represents the inline complex type for
// element connector
type BodyLDConnector struct {
	XMLName xml.Name `xml:"connector" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	// The operand is a valid iec variable e.g. avar[0]
	Name string `xml:"name,attr" json:"name"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
}

// BodyLDContinuation BodyLDContinuation represents the inline complex type for
// element continuation
type BodyLDContinuation struct {
	XMLName xml.Name `xml:"continuation" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	// The operand is a valid iec variable e.g. avar[0]
	Name string `xml:"name,attr" json:"name"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
}

// BodyLDActionBlockActionReference BodyLDActionBlockActionReference represents
// the inline complex type for element reference
type BodyLDActionBlockActionReference struct {
	XMLName xml.Name `xml:"reference" json:"-"`
	Name string `xml:"name,attr" json:"name"`
}

// BodyLDActionBlockAction BodyLDActionBlockAction represents the inline complex
// type for element action
type BodyLDActionBlockAction struct {
	XMLName xml.Name `xml:"action" json:"-"`
	// Name of an action or boolean variable.
	Reference *BodyLDActionBlockActionReference `xml:"reference" json:"reference,omitempty"`
	// Inline implementation of an action body.
	Inline *Body `xml:"inline" json:"inline,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	Qualifier *string `xml:"qualifier,attr" json:"qualifier,omitempty"`
	Duration *string `xml:"duration,attr" json:"duration,omitempty"`
	Indicator *string `xml:"indicator,attr" json:"indicator,omitempty"`
}

// BodyLDActionBlock BodyLDActionBlock represents the inline complex type for
// element actionBlock
type BodyLDActionBlock struct {
	XMLName xml.Name `xml:"actionBlock" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	Action []BodyLDActionBlockAction `xml:"action" json:"action,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
}

// BodyLDBlockInputVariablesVariable BodyLDBlockInputVariablesVariable
// represents the inline complex type for element variable
type BodyLDBlockInputVariablesVariable struct {
	XMLName xml.Name `xml:"variable" json:"-"`
	ConnectionPointIn ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	FormalParameter string `xml:"formalParameter,attr" json:"formalParameter"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
	Edge *EdgeModifierType `xml:"edge,attr" json:"edge,omitempty"`
	Storage *StorageModifierType `xml:"storage,attr" json:"storage,omitempty"`
	Hidden *bool `xml:"hidden,attr" json:"hidden,omitempty"`
}

// BodyLDBlockInputVariables BodyLDBlockInputVariables represents the inline
// complex type for element inputVariables
type BodyLDBlockInputVariables struct {
	XMLName xml.Name `xml:"inputVariables" json:"-"`
	Variable []BodyLDBlockInputVariablesVariable `xml:"variable" json:"variable,omitempty"`
}

// BodyLDBlockInOutVariablesVariable BodyLDBlockInOutVariablesVariable
// represents the inline complex type for element variable
type BodyLDBlockInOutVariablesVariable struct {
	XMLName xml.Name `xml:"variable" json:"-"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	FormalParameter string `xml:"formalParameter,attr" json:"formalParameter"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
	Edge *EdgeModifierType `xml:"edge,attr" json:"edge,omitempty"`
	Storage *StorageModifierType `xml:"storage,attr" json:"storage,omitempty"`
	Hidden *bool `xml:"hidden,attr" json:"hidden,omitempty"`
}

// BodyLDBlockInOutVariables BodyLDBlockInOutVariables represents the inline
// complex type for element inOutVariables
type BodyLDBlockInOutVariables struct {
	XMLName xml.Name `xml:"inOutVariables" json:"-"`
	Variable []BodyLDBlockInOutVariablesVariable `xml:"variable" json:"variable,omitempty"`
}

// BodyLDBlockOutputVariablesVariable BodyLDBlockOutputVariablesVariable
// represents the inline complex type for element variable
type BodyLDBlockOutputVariablesVariable struct {
	XMLName xml.Name `xml:"variable" json:"-"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	FormalParameter string `xml:"formalParameter,attr" json:"formalParameter"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
	Edge *EdgeModifierType `xml:"edge,attr" json:"edge,omitempty"`
	Storage *StorageModifierType `xml:"storage,attr" json:"storage,omitempty"`
	Hidden *bool `xml:"hidden,attr" json:"hidden,omitempty"`
}

// BodyLDBlockOutputVariables BodyLDBlockOutputVariables represents the inline
// complex type for element outputVariables
type BodyLDBlockOutputVariables struct {
	XMLName xml.Name `xml:"outputVariables" json:"-"`
	Variable []BodyLDBlockOutputVariablesVariable `xml:"variable" json:"variable,omitempty"`
}

// BodyLDBlock BodyLDBlock represents the inline complex type for element block
type BodyLDBlock struct {
	XMLName xml.Name `xml:"block" json:"-"`
	// Anchor position of the box. Top left corner excluding the instance name.
	Position Position `xml:"position" json:"position"`
	// The list of used input variables (consumers)
	InputVariables BodyLDBlockInputVariables `xml:"inputVariables" json:"inputVariables"`
	// The list of used inOut variables
	InOutVariables BodyLDBlockInOutVariables `xml:"inOutVariables" json:"inOutVariables"`
	// The list of used output variables (producers)
	OutputVariables BodyLDBlockOutputVariables `xml:"outputVariables" json:"outputVariables"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	TypeName string `xml:"typeName,attr" json:"typeName"`
	InstanceName *string `xml:"instanceName,attr" json:"instanceName,omitempty"`
	// Used to identify the order of execution. Also used to identify one special
	// block if there are several blocks with the same name.
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
}

// BodyLDInVariable BodyLDInVariable represents the inline complex type for
// element inVariable
type BodyLDInVariable struct {
	XMLName xml.Name `xml:"inVariable" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	// The operand is a valid iec variable e.g. avar[0].
	Expression string `xml:"expression" json:"expression"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
	Edge *EdgeModifierType `xml:"edge,attr" json:"edge,omitempty"`
	Storage *StorageModifierType `xml:"storage,attr" json:"storage,omitempty"`
}

// BodyLDOutVariable BodyLDOutVariable represents the inline complex type for
// element outVariable
type BodyLDOutVariable struct {
	XMLName xml.Name `xml:"outVariable" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	// The operand is a valid iec variable e.g. avar[0].
	Expression string `xml:"expression" json:"expression"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
	Edge *EdgeModifierType `xml:"edge,attr" json:"edge,omitempty"`
	Storage *StorageModifierType `xml:"storage,attr" json:"storage,omitempty"`
}

// BodyLDInOutVariable BodyLDInOutVariable represents the inline complex type
// for element inOutVariable
type BodyLDInOutVariable struct {
	XMLName xml.Name `xml:"inOutVariable" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	// The operand is a valid iec variable e.g. avar[0].
	Expression string `xml:"expression" json:"expression"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
	NegatedIn *bool `xml:"negatedIn,attr" json:"negatedIn,omitempty"`
	EdgeIn *EdgeModifierType `xml:"edgeIn,attr" json:"edgeIn,omitempty"`
	StorageIn *StorageModifierType `xml:"storageIn,attr" json:"storageIn,omitempty"`
	NegatedOut *bool `xml:"negatedOut,attr" json:"negatedOut,omitempty"`
	EdgeOut *EdgeModifierType `xml:"edgeOut,attr" json:"edgeOut,omitempty"`
	StorageOut *StorageModifierType `xml:"storageOut,attr" json:"storageOut,omitempty"`
}

// BodyLDLabel BodyLDLabel represents the inline complex type for element label
type BodyLDLabel struct {
	XMLName xml.Name `xml:"label" json:"-"`
	Position Position `xml:"position" json:"position"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	Label string `xml:"label,attr" json:"label"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
}

// BodyLDJump BodyLDJump represents the inline complex type for element jump
type BodyLDJump struct {
	XMLName xml.Name `xml:"jump" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	Label string `xml:"label,attr" json:"label"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
}

// BodyLDReturn BodyLDReturn represents the inline complex type for element
// return
type BodyLDReturn struct {
	XMLName xml.Name `xml:"return" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
}

// BodyLDLeftPowerRailConnectionPointOut BodyLDLeftPowerRailConnectionPointOut
// represents the inline complex type for element connectionPointOut
type BodyLDLeftPowerRailConnectionPointOut struct {
	XMLName xml.Name `xml:"connectionPointOut" json:"-"`
}

// BodyLDLeftPowerRail BodyLDLeftPowerRail represents the inline complex type
// for element leftPowerRail
type BodyLDLeftPowerRail struct {
	XMLName xml.Name `xml:"leftPowerRail" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointOut []BodyLDLeftPowerRailConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
}

// BodyLDRightPowerRail BodyLDRightPowerRail represents the inline complex type
// for element rightPowerRail
type BodyLDRightPowerRail struct {
	XMLName xml.Name `xml:"rightPowerRail" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn []ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
}

// BodyLDCoil BodyLDCoil represents the inline complex type for element coil
type BodyLDCoil struct {
	XMLName xml.Name `xml:"coil" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	// The operand is a valid boolean iec variable e.g. avar[0]
	Variable string `xml:"variable" json:"variable"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
	Edge *EdgeModifierType `xml:"edge,attr" json:"edge,omitempty"`
	Storage *StorageModifierType `xml:"storage,attr" json:"storage,omitempty"`
}

// BodyLDContact BodyLDContact represents the inline complex type for element
// contact
type BodyLDContact struct {
	XMLName xml.Name `xml:"contact" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	// The operand is a valid boolean iec variable e.g. avar[0]
	Variable string `xml:"variable" json:"variable"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
	Edge *EdgeModifierType `xml:"edge,attr" json:"edge,omitempty"`
	Storage *StorageModifierType `xml:"storage,attr" json:"storage,omitempty"`
}

// BodyLD BodyLD represents the inline complex type for element LD
type BodyLD struct {
	XMLName xml.Name `xml:"LD" json:"-"`
	Comment BodyLDComment `xml:"comment" json:"comment"`
	Error BodyLDError `xml:"error" json:"error"`
	Connector BodyLDConnector `xml:"connector" json:"connector"`
	// Counterpart of the connector element
	Continuation BodyLDContinuation `xml:"continuation" json:"continuation"`
	ActionBlock BodyLDActionBlock `xml:"actionBlock" json:"actionBlock"`
	Block BodyLDBlock `xml:"block" json:"block"`
	// Expression used as producer
	InVariable BodyLDInVariable `xml:"inVariable" json:"inVariable"`
	// Expression used as consumer
	OutVariable BodyLDOutVariable `xml:"outVariable" json:"outVariable"`
	// Expression used as producer and consumer
	InOutVariable BodyLDInOutVariable `xml:"inOutVariable" json:"inOutVariable"`
	Label BodyLDLabel `xml:"label" json:"label"`
	Jump BodyLDJump `xml:"jump" json:"jump"`
	Return BodyLDReturn `xml:"return" json:"return"`
	LeftPowerRail BodyLDLeftPowerRail `xml:"leftPowerRail" json:"leftPowerRail"`
	RightPowerRail BodyLDRightPowerRail `xml:"rightPowerRail" json:"rightPowerRail"`
	Coil BodyLDCoil `xml:"coil" json:"coil"`
	Contact BodyLDContact `xml:"contact" json:"contact"`
}

// BodySFCComment BodySFCComment represents the inline complex type for element
// comment
type BodySFCComment struct {
	XMLName xml.Name `xml:"comment" json:"-"`
	Position Position `xml:"position" json:"position"`
	Content FormattedText `xml:"content" json:"content"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height float64 `xml:"height,attr" json:"height"`
	Width float64 `xml:"width,attr" json:"width"`
}

// BodySFCError BodySFCError represents the inline complex type for element
// error
type BodySFCError struct {
	XMLName xml.Name `xml:"error" json:"-"`
	Position Position `xml:"position" json:"position"`
	Content FormattedText `xml:"content" json:"content"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height float64 `xml:"height,attr" json:"height"`
	Width float64 `xml:"width,attr" json:"width"`
}

// BodySFCConnector BodySFCConnector represents the inline complex type for
// element connector
type BodySFCConnector struct {
	XMLName xml.Name `xml:"connector" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	// The operand is a valid iec variable e.g. avar[0]
	Name string `xml:"name,attr" json:"name"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
}

// BodySFCContinuation BodySFCContinuation represents the inline complex type
// for element continuation
type BodySFCContinuation struct {
	XMLName xml.Name `xml:"continuation" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	// The operand is a valid iec variable e.g. avar[0]
	Name string `xml:"name,attr" json:"name"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
}

// BodySFCActionBlockActionReference BodySFCActionBlockActionReference
// represents the inline complex type for element reference
type BodySFCActionBlockActionReference struct {
	XMLName xml.Name `xml:"reference" json:"-"`
	Name string `xml:"name,attr" json:"name"`
}

// BodySFCActionBlockAction BodySFCActionBlockAction represents the inline
// complex type for element action
type BodySFCActionBlockAction struct {
	XMLName xml.Name `xml:"action" json:"-"`
	// Name of an action or boolean variable.
	Reference *BodySFCActionBlockActionReference `xml:"reference" json:"reference,omitempty"`
	// Inline implementation of an action body.
	Inline *Body `xml:"inline" json:"inline,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	Qualifier *string `xml:"qualifier,attr" json:"qualifier,omitempty"`
	Duration *string `xml:"duration,attr" json:"duration,omitempty"`
	Indicator *string `xml:"indicator,attr" json:"indicator,omitempty"`
}

// BodySFCActionBlock BodySFCActionBlock represents the inline complex type for
// element actionBlock
type BodySFCActionBlock struct {
	XMLName xml.Name `xml:"actionBlock" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	Action []BodySFCActionBlockAction `xml:"action" json:"action,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
}

// BodySFCBlockInputVariablesVariable BodySFCBlockInputVariablesVariable
// represents the inline complex type for element variable
type BodySFCBlockInputVariablesVariable struct {
	XMLName xml.Name `xml:"variable" json:"-"`
	ConnectionPointIn ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	FormalParameter string `xml:"formalParameter,attr" json:"formalParameter"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
	Edge *EdgeModifierType `xml:"edge,attr" json:"edge,omitempty"`
	Storage *StorageModifierType `xml:"storage,attr" json:"storage,omitempty"`
	Hidden *bool `xml:"hidden,attr" json:"hidden,omitempty"`
}

// BodySFCBlockInputVariables BodySFCBlockInputVariables represents the inline
// complex type for element inputVariables
type BodySFCBlockInputVariables struct {
	XMLName xml.Name `xml:"inputVariables" json:"-"`
	Variable []BodySFCBlockInputVariablesVariable `xml:"variable" json:"variable,omitempty"`
}

// BodySFCBlockInOutVariablesVariable BodySFCBlockInOutVariablesVariable
// represents the inline complex type for element variable
type BodySFCBlockInOutVariablesVariable struct {
	XMLName xml.Name `xml:"variable" json:"-"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	FormalParameter string `xml:"formalParameter,attr" json:"formalParameter"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
	Edge *EdgeModifierType `xml:"edge,attr" json:"edge,omitempty"`
	Storage *StorageModifierType `xml:"storage,attr" json:"storage,omitempty"`
	Hidden *bool `xml:"hidden,attr" json:"hidden,omitempty"`
}

// BodySFCBlockInOutVariables BodySFCBlockInOutVariables represents the inline
// complex type for element inOutVariables
type BodySFCBlockInOutVariables struct {
	XMLName xml.Name `xml:"inOutVariables" json:"-"`
	Variable []BodySFCBlockInOutVariablesVariable `xml:"variable" json:"variable,omitempty"`
}

// BodySFCBlockOutputVariablesVariable BodySFCBlockOutputVariablesVariable
// represents the inline complex type for element variable
type BodySFCBlockOutputVariablesVariable struct {
	XMLName xml.Name `xml:"variable" json:"-"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	FormalParameter string `xml:"formalParameter,attr" json:"formalParameter"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
	Edge *EdgeModifierType `xml:"edge,attr" json:"edge,omitempty"`
	Storage *StorageModifierType `xml:"storage,attr" json:"storage,omitempty"`
	Hidden *bool `xml:"hidden,attr" json:"hidden,omitempty"`
}

// BodySFCBlockOutputVariables BodySFCBlockOutputVariables represents the inline
// complex type for element outputVariables
type BodySFCBlockOutputVariables struct {
	XMLName xml.Name `xml:"outputVariables" json:"-"`
	Variable []BodySFCBlockOutputVariablesVariable `xml:"variable" json:"variable,omitempty"`
}

// BodySFCBlock BodySFCBlock represents the inline complex type for element
// block
type BodySFCBlock struct {
	XMLName xml.Name `xml:"block" json:"-"`
	// Anchor position of the box. Top left corner excluding the instance name.
	Position Position `xml:"position" json:"position"`
	// The list of used input variables (consumers)
	InputVariables BodySFCBlockInputVariables `xml:"inputVariables" json:"inputVariables"`
	// The list of used inOut variables
	InOutVariables BodySFCBlockInOutVariables `xml:"inOutVariables" json:"inOutVariables"`
	// The list of used output variables (producers)
	OutputVariables BodySFCBlockOutputVariables `xml:"outputVariables" json:"outputVariables"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	TypeName string `xml:"typeName,attr" json:"typeName"`
	InstanceName *string `xml:"instanceName,attr" json:"instanceName,omitempty"`
	// Used to identify the order of execution. Also used to identify one special
	// block if there are several blocks with the same name.
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
}

// BodySFCInVariable BodySFCInVariable represents the inline complex type for
// element inVariable
type BodySFCInVariable struct {
	XMLName xml.Name `xml:"inVariable" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	// The operand is a valid iec variable e.g. avar[0].
	Expression string `xml:"expression" json:"expression"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
	Edge *EdgeModifierType `xml:"edge,attr" json:"edge,omitempty"`
	Storage *StorageModifierType `xml:"storage,attr" json:"storage,omitempty"`
}

// BodySFCOutVariable BodySFCOutVariable represents the inline complex type for
// element outVariable
type BodySFCOutVariable struct {
	XMLName xml.Name `xml:"outVariable" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	// The operand is a valid iec variable e.g. avar[0].
	Expression string `xml:"expression" json:"expression"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
	Edge *EdgeModifierType `xml:"edge,attr" json:"edge,omitempty"`
	Storage *StorageModifierType `xml:"storage,attr" json:"storage,omitempty"`
}

// BodySFCInOutVariable BodySFCInOutVariable represents the inline complex type
// for element inOutVariable
type BodySFCInOutVariable struct {
	XMLName xml.Name `xml:"inOutVariable" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	// The operand is a valid iec variable e.g. avar[0].
	Expression string `xml:"expression" json:"expression"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
	NegatedIn *bool `xml:"negatedIn,attr" json:"negatedIn,omitempty"`
	EdgeIn *EdgeModifierType `xml:"edgeIn,attr" json:"edgeIn,omitempty"`
	StorageIn *StorageModifierType `xml:"storageIn,attr" json:"storageIn,omitempty"`
	NegatedOut *bool `xml:"negatedOut,attr" json:"negatedOut,omitempty"`
	EdgeOut *EdgeModifierType `xml:"edgeOut,attr" json:"edgeOut,omitempty"`
	StorageOut *StorageModifierType `xml:"storageOut,attr" json:"storageOut,omitempty"`
}

// BodySFCLabel BodySFCLabel represents the inline complex type for element
// label
type BodySFCLabel struct {
	XMLName xml.Name `xml:"label" json:"-"`
	Position Position `xml:"position" json:"position"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	Label string `xml:"label,attr" json:"label"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
}

// BodySFCJump BodySFCJump represents the inline complex type for element jump
type BodySFCJump struct {
	XMLName xml.Name `xml:"jump" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	Label string `xml:"label,attr" json:"label"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
}

// BodySFCReturn BodySFCReturn represents the inline complex type for element
// return
type BodySFCReturn struct {
	XMLName xml.Name `xml:"return" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
}

// BodySFCLeftPowerRailConnectionPointOut BodySFCLeftPowerRailConnectionPointOut
// represents the inline complex type for element connectionPointOut
type BodySFCLeftPowerRailConnectionPointOut struct {
	XMLName xml.Name `xml:"connectionPointOut" json:"-"`
}

// BodySFCLeftPowerRail BodySFCLeftPowerRail represents the inline complex type
// for element leftPowerRail
type BodySFCLeftPowerRail struct {
	XMLName xml.Name `xml:"leftPowerRail" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointOut []BodySFCLeftPowerRailConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
}

// BodySFCRightPowerRail BodySFCRightPowerRail represents the inline complex
// type for element rightPowerRail
type BodySFCRightPowerRail struct {
	XMLName xml.Name `xml:"rightPowerRail" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn []ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
}

// BodySFCCoil BodySFCCoil represents the inline complex type for element coil
type BodySFCCoil struct {
	XMLName xml.Name `xml:"coil" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	// The operand is a valid boolean iec variable e.g. avar[0]
	Variable string `xml:"variable" json:"variable"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
	Edge *EdgeModifierType `xml:"edge,attr" json:"edge,omitempty"`
	Storage *StorageModifierType `xml:"storage,attr" json:"storage,omitempty"`
}

// BodySFCContact BodySFCContact represents the inline complex type for element
// contact
type BodySFCContact struct {
	XMLName xml.Name `xml:"contact" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	// The operand is a valid boolean iec variable e.g. avar[0]
	Variable string `xml:"variable" json:"variable"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	ExecutionOrderId *uint64 `xml:"executionOrderId,attr" json:"executionOrderId,omitempty"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
	Edge *EdgeModifierType `xml:"edge,attr" json:"edge,omitempty"`
	Storage *StorageModifierType `xml:"storage,attr" json:"storage,omitempty"`
}

// BodySFCStepConnectionPointOut BodySFCStepConnectionPointOut represents the
// inline complex type for element connectionPointOut
type BodySFCStepConnectionPointOut struct {
	XMLName xml.Name `xml:"connectionPointOut" json:"-"`
}

// BodySFCStepConnectionPointOutAction BodySFCStepConnectionPointOutAction
// represents the inline complex type for element connectionPointOutAction
type BodySFCStepConnectionPointOutAction struct {
	XMLName xml.Name `xml:"connectionPointOutAction" json:"-"`
}

// BodySFCStep BodySFCStep represents the inline complex type for element step
type BodySFCStep struct {
	XMLName xml.Name `xml:"step" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	ConnectionPointOut *BodySFCStepConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	ConnectionPointOutAction *BodySFCStepConnectionPointOutAction `xml:"connectionPointOutAction" json:"connectionPointOutAction,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	Name string `xml:"name,attr" json:"name"`
	InitialStep *bool `xml:"initialStep,attr" json:"initialStep,omitempty"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
}

// BodySFCMacroStep BodySFCMacroStep represents the inline complex type for
// element macroStep
type BodySFCMacroStep struct {
	XMLName xml.Name `xml:"macroStep" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	Body *Body `xml:"body" json:"body,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	Name *string `xml:"name,attr" json:"name,omitempty"`
}

// BodySFCJumpStep BodySFCJumpStep represents the inline complex type for
// element jumpStep
type BodySFCJumpStep struct {
	XMLName xml.Name `xml:"jumpStep" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	TargetName string `xml:"targetName,attr" json:"targetName"`
}

// BodySFCTransitionConditionReference BodySFCTransitionConditionReference
// represents the inline complex type for element reference
type BodySFCTransitionConditionReference struct {
	XMLName xml.Name `xml:"reference" json:"-"`
	Name string `xml:"name,attr" json:"name"`
}

// BodySFCTransitionConditionInline BodySFCTransitionConditionInline represents
// the inline complex type for element inline
type BodySFCTransitionConditionInline struct {
	XMLName xml.Name `xml:"inline" json:"-"`
}

// BodySFCTransitionCondition BodySFCTransitionCondition represents the inline
// complex type for element condition
type BodySFCTransitionCondition struct {
	XMLName xml.Name `xml:"condition" json:"-"`
	Reference BodySFCTransitionConditionReference `xml:"reference" json:"reference"`
	Connection []Connection `xml:"connection" json:"connection"`
	Inline BodySFCTransitionConditionInline `xml:"inline" json:"inline"`
	Negated *bool `xml:"negated,attr" json:"negated,omitempty"`
}

// BodySFCTransition BodySFCTransition represents the inline complex type for
// element transition
type BodySFCTransition struct {
	XMLName xml.Name `xml:"transition" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	Condition *BodySFCTransitionCondition `xml:"condition" json:"condition,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	// The priority of a transition is evaluated, if the transition is connected to
	// a selectionDivergence element.
	Priority *uint64 `xml:"priority,attr" json:"priority,omitempty"`
}

// BodySFCSelectionDivergenceConnectionPointOut
// BodySFCSelectionDivergenceConnectionPointOut represents the inline complex
// type for element connectionPointOut
type BodySFCSelectionDivergenceConnectionPointOut struct {
	XMLName xml.Name `xml:"connectionPointOut" json:"-"`
}

// BodySFCSelectionDivergence BodySFCSelectionDivergence represents the inline
// complex type for element selectionDivergence
type BodySFCSelectionDivergence struct {
	XMLName xml.Name `xml:"selectionDivergence" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	ConnectionPointOut []BodySFCSelectionDivergenceConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
}

// BodySFCSelectionConvergenceConnectionPointIn
// BodySFCSelectionConvergenceConnectionPointIn represents the inline complex
// type for element connectionPointIn
type BodySFCSelectionConvergenceConnectionPointIn struct {
	XMLName xml.Name `xml:"connectionPointIn" json:"-"`
}

// BodySFCSelectionConvergence BodySFCSelectionConvergence represents the inline
// complex type for element selectionConvergence
type BodySFCSelectionConvergence struct {
	XMLName xml.Name `xml:"selectionConvergence" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn []BodySFCSelectionConvergenceConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
}

// BodySFCSimultaneousDivergenceConnectionPointOut
// BodySFCSimultaneousDivergenceConnectionPointOut represents the inline complex
// type for element connectionPointOut
type BodySFCSimultaneousDivergenceConnectionPointOut struct {
	XMLName xml.Name `xml:"connectionPointOut" json:"-"`
}

// BodySFCSimultaneousDivergence BodySFCSimultaneousDivergence represents the
// inline complex type for element simultaneousDivergence
type BodySFCSimultaneousDivergence struct {
	XMLName xml.Name `xml:"simultaneousDivergence" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn *ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	ConnectionPointOut []BodySFCSimultaneousDivergenceConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
	Name *string `xml:"name,attr" json:"name,omitempty"`
}

// BodySFCSimultaneousConvergence BodySFCSimultaneousConvergence represents the
// inline complex type for element simultaneousConvergence
type BodySFCSimultaneousConvergence struct {
	XMLName xml.Name `xml:"simultaneousConvergence" json:"-"`
	Position Position `xml:"position" json:"position"`
	ConnectionPointIn []ConnectionPointIn `xml:"connectionPointIn" json:"connectionPointIn,omitempty"`
	ConnectionPointOut *ConnectionPointOut `xml:"connectionPointOut" json:"connectionPointOut,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalId uint64 `xml:"localId,attr" json:"localId"`
	Height *float64 `xml:"height,attr" json:"height,omitempty"`
	Width *float64 `xml:"width,attr" json:"width,omitempty"`
}

// BodySFC BodySFC represents the inline complex type for element SFC
type BodySFC struct {
	XMLName xml.Name `xml:"SFC" json:"-"`
	Comment BodySFCComment `xml:"comment" json:"comment"`
	Error BodySFCError `xml:"error" json:"error"`
	Connector BodySFCConnector `xml:"connector" json:"connector"`
	// Counterpart of the connector element
	Continuation BodySFCContinuation `xml:"continuation" json:"continuation"`
	ActionBlock BodySFCActionBlock `xml:"actionBlock" json:"actionBlock"`
	Block BodySFCBlock `xml:"block" json:"block"`
	// Expression used as producer
	InVariable BodySFCInVariable `xml:"inVariable" json:"inVariable"`
	// Expression used as consumer
	OutVariable BodySFCOutVariable `xml:"outVariable" json:"outVariable"`
	// Expression used as producer and consumer
	InOutVariable BodySFCInOutVariable `xml:"inOutVariable" json:"inOutVariable"`
	Label BodySFCLabel `xml:"label" json:"label"`
	Jump BodySFCJump `xml:"jump" json:"jump"`
	Return BodySFCReturn `xml:"return" json:"return"`
	LeftPowerRail BodySFCLeftPowerRail `xml:"leftPowerRail" json:"leftPowerRail"`
	RightPowerRail BodySFCRightPowerRail `xml:"rightPowerRail" json:"rightPowerRail"`
	Coil BodySFCCoil `xml:"coil" json:"coil"`
	Contact BodySFCContact `xml:"contact" json:"contact"`
	// A single step in a SFC Sequence. Actions are associated with a step by using
	// an actionBlock element with a connection to the step element
	Step BodySFCStep `xml:"step" json:"step"`
	MacroStep BodySFCMacroStep `xml:"macroStep" json:"macroStep"`
	// Jump to a step, macro step or simultaneous divergence. Acts like a step.
	// Predecessor should be a transition.
	JumpStep BodySFCJumpStep `xml:"jumpStep" json:"jumpStep"`
	Transition BodySFCTransition `xml:"transition" json:"transition"`
	SelectionDivergence BodySFCSelectionDivergence `xml:"selectionDivergence" json:"selectionDivergence"`
	SelectionConvergence BodySFCSelectionConvergence `xml:"selectionConvergence" json:"selectionConvergence"`
	SimultaneousDivergence BodySFCSimultaneousDivergence `xml:"simultaneousDivergence" json:"simultaneousDivergence"`
	SimultaneousConvergence BodySFCSimultaneousConvergence `xml:"simultaneousConvergence" json:"simultaneousConvergence"`
}

// Body Implementation part of a POU, action or transistion
type Body struct {
	XMLName xml.Name `xml:"http://www.plcopen.org/xml/tc6.xsd body" json:"-"`
	// Additional userspecific information to the element
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	IL FormattedText `xml:"IL" json:"IL"`
	ST FormattedText `xml:"ST" json:"ST"`
	FBD BodyFBD `xml:"FBD" json:"FBD"`
	LD BodyLD `xml:"LD" json:"LD"`
	SFC BodySFC `xml:"SFC" json:"SFC"`
}

// VarList List of variable declarations that share the same memory attributes
// (CONSTANT, RETAIN, NON_RETAIN, PERSISTENT); extends ppx:varListPlain
type VarList struct {
	XMLName xml.Name `xml:"http://www.plcopen.org/xml/tc6.xsd varList" json:"-"`
	Name *string `xml:"name,attr" json:"name,omitempty"`
	Constant *bool `xml:"constant,attr" json:"constant,omitempty"`
	Retain *bool `xml:"retain,attr" json:"retain,omitempty"`
	Nonretain *bool `xml:"nonretain,attr" json:"nonretain,omitempty"`
	Persistent *bool `xml:"persistent,attr" json:"persistent,omitempty"`
	Nonpersistent *bool `xml:"nonpersistent,attr" json:"nonpersistent,omitempty"`
}

// VarListPlainVariable VarListPlainVariable represents the inline complex type
// for element variable
type VarListPlainVariable struct {
	XMLName xml.Name `xml:"variable" json:"-"`
	Type DataType `xml:"type" json:"type"`
	InitialValue *Value `xml:"initialValue" json:"initialValue,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	Name string `xml:"name,attr" json:"name"`
	Address *string `xml:"address,attr" json:"address,omitempty"`
}

// VarListPlain List of variable declarations without attributes
type VarListPlain struct {
	XMLName xml.Name `xml:"http://www.plcopen.org/xml/tc6.xsd varListPlain" json:"-"`
	Variable []VarListPlainVariable `xml:"variable" json:"variable,omitempty"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
}

// Position Defines a graphical position in X, Y coordinates
type Position struct {
	XMLName xml.Name `xml:"http://www.plcopen.org/xml/tc6.xsd position" json:"-"`
	X float64 `xml:"x,attr" json:"x"`
	Y float64 `xml:"y,attr" json:"y"`
}

// Connection Describes a connection between the consumer element (eg. input
// variable of a function block) and the producer element (eg. output variable
// of a function block). It may contain a list of positions that describes the
// path of the connection.
type Connection struct {
	XMLName xml.Name `xml:"http://www.plcopen.org/xml/tc6.xsd connection" json:"-"`
	// All positions of the directed connection path. If any positions are given,
	// the list has to contain the first (input pin of the consumer element) as
	// well as the last (output pin of the producer element).
	Position []Position `xml:"position" json:"position,omitempty"`
	// Identifies the element the connection starts from.
	RefLocalId uint64 `xml:"refLocalId,attr" json:"refLocalId"`
	// If present: This attribute denotes the name of the VAR_OUTPUT /
	// VAR_IN_OUTparameter of the pou block that is the start of the connection. If
	// not present: If the refLocalId attribute refers to a pou block, the start of
	// the connection is the first output of this block, which is not ENO. If the
	// refLocalId attribute refers to any other element type, the start of the
	// connection is the elements single native output.
	FormalParameter *string `xml:"formalParameter,attr" json:"formalParameter,omitempty"`
}

// ConnectionPointIn Defines a connection point on the consumer side
type ConnectionPointIn struct {
	XMLName xml.Name `xml:"http://www.plcopen.org/xml/tc6.xsd connectionPointIn" json:"-"`
	// Relative position of the connection pin. Origin is the anchor position of
	// the block.
	RelPosition *Position `xml:"relPosition" json:"relPosition,omitempty"`
	Connection []Connection `xml:"connection" json:"connection"`
	// The operand is a valid iec variable e.g. avar[0] or an iec expression or
	// multiple token text e.g. a + b (*sum*). An iec 61131-3 parser has to be used
	// to extract variable information.
	Expression string `xml:"expression" json:"expression"`
}

// ConnectionPointOut Defines a connection point on the producer side
type ConnectionPointOut struct {
	XMLName xml.Name `xml:"http://www.plcopen.org/xml/tc6.xsd connectionPointOut" json:"-"`
	// Relative position of the connection pin. Origin is the anchor position of
	// the block.
	RelPosition *Position `xml:"relPosition" json:"relPosition,omitempty"`
	// The operand is a valid iec variable e.g. avar[0].
	Expression *string `xml:"expression" json:"expression,omitempty"`
}

// PouInstance Represents a program or function block instance either running
// with or without a task
type PouInstance struct {
	XMLName xml.Name `xml:"http://www.plcopen.org/xml/tc6.xsd pouInstance" json:"-"`
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	Name string `xml:"name,attr" json:"name"`
	Type string `xml:"type,attr" json:"type"`
}

// FormattedText Formatted text according to parts of XHTML 1.1
type FormattedText struct {
	XMLName xml.Name `xml:"http://www.plcopen.org/xml/tc6.xsd formattedText" json:"-"`
}

// EdgeModifierType Defines the edge detection behaviour of a variable
type EdgeModifierType string

// EdgeModifierType enumeration values
const (
	EdgeModifierTypeNone EdgeModifierType = "none"
	EdgeModifierTypeFalling EdgeModifierType = "falling"
	EdgeModifierTypeRising EdgeModifierType = "rising"
)

// StorageModifierType Defines the storage mode (S/R) behaviour of a variable
type StorageModifierType string

// StorageModifierType enumeration values
const (
	StorageModifierTypeNone StorageModifierType = "none"
	StorageModifierTypeSet StorageModifierType = "set"
	StorageModifierTypeReset StorageModifierType = "reset"
)

// PouType Defines the different types of a POU
type PouType string

// PouType enumeration values
const (
	PouTypeFunction PouType = "function"
	PouTypeFunctionBlock PouType = "functionBlock"
	PouTypeProgram PouType = "program"
)

// ProjectFileHeader ProjectFileHeader represents the inline complex type for
// element fileHeader
type ProjectFileHeader struct {
	XMLName xml.Name `xml:"fileHeader" json:"-"`
	CompanyName string `xml:"companyName,attr" json:"companyName"`
	CompanyURL *string `xml:"companyURL,attr" json:"companyURL,omitempty"`
	ProductName string `xml:"productName,attr" json:"productName"`
	ProductVersion string `xml:"productVersion,attr" json:"productVersion"`
	ProductRelease *string `xml:"productRelease,attr" json:"productRelease,omitempty"`
	CreationDateTime time.Time `xml:"creationDateTime,attr" json:"creationDateTime"`
	ContentDescription *string `xml:"contentDescription,attr" json:"contentDescription,omitempty"`
}

// ProjectContentHeaderCoordinateInfoPageSize
// ProjectContentHeaderCoordinateInfoPageSize represents the inline complex type
// for element pageSize
type ProjectContentHeaderCoordinateInfoPageSize struct {
	XMLName xml.Name `xml:"pageSize" json:"-"`
	X float64 `xml:"x,attr" json:"x"`
	Y float64 `xml:"y,attr" json:"y"`
}

// ProjectContentHeaderCoordinateInfoFbdScaling
// ProjectContentHeaderCoordinateInfoFbdScaling represents the inline complex
// type for element scaling
type ProjectContentHeaderCoordinateInfoFbdScaling struct {
	XMLName xml.Name `xml:"scaling" json:"-"`
	X float64 `xml:"x,attr" json:"x"`
	Y float64 `xml:"y,attr" json:"y"`
}

// ProjectContentHeaderCoordinateInfoFbd ProjectContentHeaderCoordinateInfoFbd
// represents the inline complex type for element fbd
type ProjectContentHeaderCoordinateInfoFbd struct {
	XMLName xml.Name `xml:"fbd" json:"-"`
	Scaling ProjectContentHeaderCoordinateInfoFbdScaling `xml:"scaling" json:"scaling"`
}

// ProjectContentHeaderCoordinateInfoLdScaling
// ProjectContentHeaderCoordinateInfoLdScaling represents the inline complex
// type for element scaling
type ProjectContentHeaderCoordinateInfoLdScaling struct {
	XMLName xml.Name `xml:"scaling" json:"-"`
	X float64 `xml:"x,attr" json:"x"`
	Y float64 `xml:"y,attr" json:"y"`
}

// ProjectContentHeaderCoordinateInfoLd ProjectContentHeaderCoordinateInfoLd
// represents the inline complex type for element ld
type ProjectContentHeaderCoordinateInfoLd struct {
	XMLName xml.Name `xml:"ld" json:"-"`
	Scaling ProjectContentHeaderCoordinateInfoLdScaling `xml:"scaling" json:"scaling"`
}

// ProjectContentHeaderCoordinateInfoSfcScaling
// ProjectContentHeaderCoordinateInfoSfcScaling represents the inline complex
// type for element scaling
type ProjectContentHeaderCoordinateInfoSfcScaling struct {
	XMLName xml.Name `xml:"scaling" json:"-"`
	X float64 `xml:"x,attr" json:"x"`
	Y float64 `xml:"y,attr" json:"y"`
}

// ProjectContentHeaderCoordinateInfoSfc ProjectContentHeaderCoordinateInfoSfc
// represents the inline complex type for element sfc
type ProjectContentHeaderCoordinateInfoSfc struct {
	XMLName xml.Name `xml:"sfc" json:"-"`
	Scaling ProjectContentHeaderCoordinateInfoSfcScaling `xml:"scaling" json:"scaling"`
}

// ProjectContentHeaderCoordinateInfo ProjectContentHeaderCoordinateInfo
// represents the inline complex type for element coordinateInfo
type ProjectContentHeaderCoordinateInfo struct {
	XMLName xml.Name `xml:"coordinateInfo" json:"-"`
	PageSize *ProjectContentHeaderCoordinateInfoPageSize `xml:"pageSize" json:"pageSize,omitempty"`
	Fbd ProjectContentHeaderCoordinateInfoFbd `xml:"fbd" json:"fbd"`
	Ld ProjectContentHeaderCoordinateInfoLd `xml:"ld" json:"ld"`
	Sfc ProjectContentHeaderCoordinateInfoSfc `xml:"sfc" json:"sfc"`
}

// ProjectContentHeader ProjectContentHeader represents the inline complex type
// for element contentHeader
type ProjectContentHeader struct {
	XMLName xml.Name `xml:"contentHeader" json:"-"`
	Comment *string `xml:"Comment" json:"Comment,omitempty"`
	CoordinateInfo ProjectContentHeaderCoordinateInfo `xml:"coordinateInfo" json:"coordinateInfo"`
	Name string `xml:"name,attr" json:"name"`
	Version *string `xml:"version,attr" json:"version,omitempty"`
	ModificationDateTime *time.Time `xml:"modificationDateTime,attr" json:"modificationDateTime,omitempty"`
	Organization *string `xml:"organization,attr" json:"organization,omitempty"`
	Author *string `xml:"author,attr" json:"author,omitempty"`
	// Documentation language of the project e.g. "en-US"
	Language *string `xml:"language,attr" json:"language,omitempty"`
}

// ProjectTypesDataTypesDataType ProjectTypesDataTypesDataType represents the
// inline complex type for element dataType
type ProjectTypesDataTypesDataType struct {
	XMLName xml.Name `xml:"dataType" json:"-"`
	BaseType DataType `xml:"baseType" json:"baseType"`
	InitialValue *Value `xml:"initialValue" json:"initialValue,omitempty"`
	// Additional userspecific information to the element
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	Name string `xml:"name,attr" json:"name"`
}

// ProjectTypesDataTypes ProjectTypesDataTypes represents the inline complex
// type for element dataTypes
type ProjectTypesDataTypes struct {
	XMLName xml.Name `xml:"dataTypes" json:"-"`
	DataType []ProjectTypesDataTypesDataType `xml:"dataType" json:"dataType,omitempty"`
}

// ProjectTypesPousPouInterfaceLocalVars ProjectTypesPousPouInterfaceLocalVars
// represents the inline complex type for element localVars
type ProjectTypesPousPouInterfaceLocalVars struct {
	XMLName xml.Name `xml:"localVars" json:"-"`
}

// ProjectTypesPousPouInterfaceTempVars ProjectTypesPousPouInterfaceTempVars
// represents the inline complex type for element tempVars
type ProjectTypesPousPouInterfaceTempVars struct {
	XMLName xml.Name `xml:"tempVars" json:"-"`
}

// ProjectTypesPousPouInterfaceInputVars ProjectTypesPousPouInterfaceInputVars
// represents the inline complex type for element inputVars
type ProjectTypesPousPouInterfaceInputVars struct {
	XMLName xml.Name `xml:"inputVars" json:"-"`
}

// ProjectTypesPousPouInterfaceOutputVars ProjectTypesPousPouInterfaceOutputVars
// represents the inline complex type for element outputVars
type ProjectTypesPousPouInterfaceOutputVars struct {
	XMLName xml.Name `xml:"outputVars" json:"-"`
}

// ProjectTypesPousPouInterfaceInOutVars ProjectTypesPousPouInterfaceInOutVars
// represents the inline complex type for element inOutVars
type ProjectTypesPousPouInterfaceInOutVars struct {
	XMLName xml.Name `xml:"inOutVars" json:"-"`
}

// ProjectTypesPousPouInterfaceExternalVars
// ProjectTypesPousPouInterfaceExternalVars represents the inline complex type
// for element externalVars
type ProjectTypesPousPouInterfaceExternalVars struct {
	XMLName xml.Name `xml:"externalVars" json:"-"`
}

// ProjectTypesPousPouInterfaceGlobalVars ProjectTypesPousPouInterfaceGlobalVars
// represents the inline complex type for element globalVars
type ProjectTypesPousPouInterfaceGlobalVars struct {
	XMLName xml.Name `xml:"globalVars" json:"-"`
}

// ProjectTypesPousPouInterface ProjectTypesPousPouInterface represents the
// inline complex type for element interface
type ProjectTypesPousPouInterface struct {
	XMLName xml.Name `xml:"interface" json:"-"`
	ReturnType *DataType `xml:"returnType" json:"returnType,omitempty"`
	// Additional userspecific information to the element
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	LocalVars ProjectTypesPousPouInterfaceLocalVars `xml:"localVars" json:"localVars"`
	TempVars ProjectTypesPousPouInterfaceTempVars `xml:"tempVars" json:"tempVars"`
	InputVars ProjectTypesPousPouInterfaceInputVars `xml:"inputVars" json:"inputVars"`
	OutputVars ProjectTypesPousPouInterfaceOutputVars `xml:"outputVars" json:"outputVars"`
	InOutVars ProjectTypesPousPouInterfaceInOutVars `xml:"inOutVars" json:"inOutVars"`
	ExternalVars ProjectTypesPousPouInterfaceExternalVars `xml:"externalVars" json:"externalVars"`
	GlobalVars ProjectTypesPousPouInterfaceGlobalVars `xml:"globalVars" json:"globalVars"`
	AccessVars VarList `xml:"accessVars" json:"accessVars"`
}

// ProjectTypesPousPouActionsAction ProjectTypesPousPouActionsAction represents
// the inline complex type for element action
type ProjectTypesPousPouActionsAction struct {
	XMLName xml.Name `xml:"action" json:"-"`
	Body Body `xml:"body" json:"body"`
	// Additional userspecific information to the element
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	Name string `xml:"name,attr" json:"name"`
}

// ProjectTypesPousPouActions ProjectTypesPousPouActions represents the inline
// complex type for element actions
type ProjectTypesPousPouActions struct {
	XMLName xml.Name `xml:"actions" json:"-"`
	Action []ProjectTypesPousPouActionsAction `xml:"action" json:"action,omitempty"`
}

// ProjectTypesPousPouTransitionsTransition
// ProjectTypesPousPouTransitionsTransition represents the inline complex type
// for element transition
type ProjectTypesPousPouTransitionsTransition struct {
	XMLName xml.Name `xml:"transition" json:"-"`
	Body Body `xml:"body" json:"body"`
	// Additional userspecific information to the element
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	Name string `xml:"name,attr" json:"name"`
}

// ProjectTypesPousPouTransitions ProjectTypesPousPouTransitions represents the
// inline complex type for element transitions
type ProjectTypesPousPouTransitions struct {
	XMLName xml.Name `xml:"transitions" json:"-"`
	Transition []ProjectTypesPousPouTransitionsTransition `xml:"transition" json:"transition,omitempty"`
}

// ProjectTypesPousPou ProjectTypesPousPou represents the inline complex type
// for element pou
type ProjectTypesPousPou struct {
	XMLName xml.Name `xml:"pou" json:"-"`
	Interface *ProjectTypesPousPouInterface `xml:"interface" json:"interface,omitempty"`
	Actions *ProjectTypesPousPouActions `xml:"actions" json:"actions,omitempty"`
	Transitions *ProjectTypesPousPouTransitions `xml:"transitions" json:"transitions,omitempty"`
	Body *Body `xml:"body" json:"body,omitempty"`
	// Additional userspecific information to the element
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	Name string `xml:"name,attr" json:"name"`
	PouType PouType `xml:"pouType,attr" json:"pouType"`
}

// ProjectTypesPous ProjectTypesPous represents the inline complex type for
// element pous
type ProjectTypesPous struct {
	XMLName xml.Name `xml:"pous" json:"-"`
	Pou []ProjectTypesPousPou `xml:"pou" json:"pou,omitempty"`
}

// ProjectTypes ProjectTypes represents the inline complex type for element
// types
type ProjectTypes struct {
	XMLName xml.Name `xml:"types" json:"-"`
	DataTypes ProjectTypesDataTypes `xml:"dataTypes" json:"dataTypes"`
	Pous ProjectTypesPous `xml:"pous" json:"pous"`
}

// ProjectInstancesConfigurationsConfigurationResourceTask
// ProjectInstancesConfigurationsConfigurationResourceTask represents the inline
// complex type for element task
type ProjectInstancesConfigurationsConfigurationResourceTask struct {
	XMLName xml.Name `xml:"task" json:"-"`
	PouInstance []PouInstance `xml:"pouInstance" json:"pouInstance,omitempty"`
	// Additional userspecific information to the element
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	Name string `xml:"name,attr" json:"name"`
	Single *string `xml:"single,attr" json:"single,omitempty"`
	Interval *string `xml:"interval,attr" json:"interval,omitempty"`
	Priority string `xml:"priority,attr" json:"priority"`
}

// ProjectInstancesConfigurationsConfigurationResource
// ProjectInstancesConfigurationsConfigurationResource represents the inline
// complex type for element resource
type ProjectInstancesConfigurationsConfigurationResource struct {
	XMLName xml.Name `xml:"resource" json:"-"`
	Task []ProjectInstancesConfigurationsConfigurationResourceTask `xml:"task" json:"task,omitempty"`
	GlobalVars []VarList `xml:"globalVars" json:"globalVars,omitempty"`
	PouInstance []PouInstance `xml:"pouInstance" json:"pouInstance,omitempty"`
	// Additional userspecific information to the element
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	Name string `xml:"name,attr" json:"name"`
}

// ProjectInstancesConfigurationsConfiguration
// ProjectInstancesConfigurationsConfiguration represents the inline complex
// type for element configuration
type ProjectInstancesConfigurationsConfiguration struct {
	XMLName xml.Name `xml:"configuration" json:"-"`
	Resource []ProjectInstancesConfigurationsConfigurationResource `xml:"resource" json:"resource,omitempty"`
	GlobalVars []VarList `xml:"globalVars" json:"globalVars,omitempty"`
	// Additional userspecific information to the element
	Documentation *FormattedText `xml:"documentation" json:"documentation,omitempty"`
	Name string `xml:"name,attr" json:"name"`
}

// ProjectInstancesConfigurations ProjectInstancesConfigurations represents the
// inline complex type for element configurations
type ProjectInstancesConfigurations struct {
	XMLName xml.Name `xml:"configurations" json:"-"`
	Configuration []ProjectInstancesConfigurationsConfiguration `xml:"configuration" json:"configuration,omitempty"`
}

// ProjectInstances ProjectInstances represents the inline complex type for
// element instances
type ProjectInstances struct {
	XMLName xml.Name `xml:"instances" json:"-"`
	Configurations ProjectInstancesConfigurations `xml:"configurations" json:"configurations"`
}

// Project represents Project
type Project struct {
	XMLName xml.Name `xml:"http://www.plcopen.org/xml/tc6.xsd Project" json:"-"`
	FileHeader ProjectFileHeader `xml:"fileHeader" json:"fileHeader"`
	ContentHeader ProjectContentHeader `xml:"contentHeader" json:"contentHeader"`
	Types ProjectTypes `xml:"types" json:"types"`
	Instances ProjectInstances `xml:"instances" json:"instances"`
}

